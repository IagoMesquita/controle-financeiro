import type { NextPage } from "next";
import { useState, useEffect } from "react";
import Head from "next/head";
import Form from "../components/Form";
import Resume from "../components/Resume";
import { ITransaction } from "../interface/ITransaction";


interface ITransactionProps {
  transactionsDb: ITransaction[];
  error?: string
}


const Home: NextPage<ITransactionProps> = ({ transactionsDb, error }) => {

  const [transactions, setTransaction] = useState<ITransaction[]>([...transactionsDb]);


  const [entries, setEntries] = useState<number>(0);
  const [expenses, setExpenses] = useState<number>(0);
  const [balance, setBalance] = useState<number>(0);


  useEffect(() => {

    const sumOfEntries = transactions.filter((el) => el.type === "INCOME")
      .reduce((acc, el) => acc + Number(el.amount), 0)

    const sumOfExpenses = transactions.filter((el) => el.type === "EXPENSE")
      .reduce((acc, el) => acc + Number(el.amount), 0)

    const total = sumOfEntries - sumOfExpenses;

    setEntries(sumOfEntries);
    setExpenses(sumOfExpenses);
    setBalance(total);


  }, [transactions])

  const handleAdd = async (transaction: Omit<ITransaction, "id">) => {
    const response = await fetch("http://localhost:8080/transactions", {
      method: "POST",
      headers: {
        'content-type': 'application/json',
      },
      body: JSON.stringify({
        "title": transaction.title,
        "amount": Number(transaction.amount),
        "type": transaction.type ? "EXPENSE" : "INCOME"
      })
    });

    const newTransaction: ITransaction = await response.json();

    const newTransactions = [...transactions, newTransaction];

    setTransaction(newTransactions);

    localStorage.setItem('transactions', JSON.stringify(newTransactions));

  }

  return (
    <div>
      <Head>
        <title>Controle Financeiro</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {error && <div>Error: {error} !!</div>}
      <Resume
        entries={entries}
        expenses={expenses}
        balance={balance}
      />
      <Form
        handleAdd={handleAdd}
        transactions={transactions}
        setTransaction={setTransaction}
      />

    </div>
  );
};

export async function getServerSideProps() {
  try {
    const res = await fetch("http://localhost:8080/transactions");

    if (!res.ok) {
      throw new Error(`Falha ao buscar as transações ${res.statusText}`)
    }

    const transactionsDb = await res.json();

    return {
      props: { transactionsDb },
    };

  } catch (error: any) {
    console.error(error);

    return {
      props: {
        transactionsDb: [],
        error: error.message,
      }
    }
  }
}

export default Home;
